import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import ChatMemberUpdated
from aiogram.filters import ChatMemberUpdatedFilter
from aiogram.enums import ChatMemberStatus

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram Bot API —Ç–æ–∫–µ–Ω
TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
# URL API –ê—Ñ–∏–Ω—ã (—É—Ç–æ—á–Ω–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ê—Ñ–∏–Ω—ã)
ATHENA_API_URL = "https://ru.app.athenachat.ai/api"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
from aiogram import Router
dp = Router()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

### üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ê—Ñ–∏–Ω—É ###
def send_to_athena(text):
    data = {"text": text}
    response = requests.post(ATHENA_API_URL, json=data)
    
    if response.status_code == 200:
        return response.json().get("response", "–û—à–∏–±–∫–∞ AI")
    else:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ê—Ñ–∏–Ω–µ"

### üîπ –ö–æ–º–∞–Ω–¥–∞ /start ###
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å AI. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ —á–µ—Ä–µ–∑ –ê—Ñ–∏–Ω—É!")

### üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤) ###
@dp.chat_member(ChatMemberUpdatedFilter())
async def check_new_member(event: ChatMemberUpdated):
    if event.new_chat_member.status == ChatMemberStatus.MEMBER:
        user = event.new_chat_member.user

        if user.is_bot:
            try:
                await bot.ban_chat_member(event.chat.id, user.id)
                await bot.send_message(event.chat.id, f"ü§ñ –ë–æ—Ç @{user.username} –±—ã–ª —É–¥–∞–ª–µ–Ω!")
                logging.info(f"–£–¥–∞–ª–µ–Ω –±–æ—Ç: @{user.username}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ @{user.username}: {e}")

### üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ê—Ñ–∏–Ω—É ###
@dp.message()
async def process_message(message: types.Message):
    ai_response = send_to_athena(message.text)
    await message.answer(ai_response)

### üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ###
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
